{"version":3,"sources":["components/EditGame.js","api.js","components/Game.js","App.js","registerServiceWorker.js","index.js"],"names":["EditGame","props","game","className","type","min","name","placeholder","value","numberPlayers","onChange","timeLimit","onClick","onCancel","onSave","gameService","create","Promise","resolve","reject","fetch","method","body","JSON","stringify","headers","Accept","then","result","json","catch","err","get","Game","state","creatingGame","handleEnableAddMode","bind","handleSave","handleOnChange","handleCancel","api","setState","heroes","this","addingGame","console","log","currentGame","update","event","target","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fbeb03fb.chunk.js","sourcesContent":["import React from 'react';\n\nconst EditGame = props => {\n  if (props.game) {\n    return (\n      <div>\n        <div className=\"editfields\">\n          <div>\n            <label>Number Of Players: </label>\n            <input\n                type=\"number\"\n                min=\"2\"\n                name=\"numberPlayers\"\n                placeholder=\"Number of Players\"\n                value={props.game.numberPlayers}\n                onChange={props.onChange}\n              />\n          </div>\n          <div>\n            <label>Time Limit: </label>\n            <select name=\"timeLimit\" \n                    value={props.game.timeLimit} \n                    onChange={props.onChange}>\n              <option value=\"30\">Lightning Rounds</option>\n              <option value=\"90\">Standard Game</option>\n              <option value=\"180\">Long Turns</option>\n              <option value=\"8000000\">Practically Forever</option>\n            </select>\n          </div>\n        </div>\n        <button onClick={props.onCancel}>Cancel</button>\n        <button onClick={props.onSave}>Save</button>\n      </div>\n    );\n  } else {\n    return <div />;\n  }\n};\n\nexport default EditGame;\n","const baseAPI = '/api';\n\nconst gameService = {\n  create(game) {\n    return new Promise((resolve, reject) => {\n      fetch(`${baseAPI}/game`, {\n        method: 'PUT',\n        body: JSON.stringify(game),\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(result => result.json())\n        .then(json => resolve(json))\n        .catch(err => {\n          reject(err);\n        });\n    });\n  },\n\n  get(game) {\n    return new Promise((resolve, reject) => {\n      fetch(`${baseAPI}/game`, {\n        method: 'GET',\n        body: JSON.stringify(game),\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(result => result.json())\n        .then(json => resolve(json))\n        .catch(err => {\n          reject(err);\n        });\n    });\n  },\n};\n\nexport default gameService;\n","import React, { Component } from 'react';\n\nimport EditGame from './EditGame';\nimport api from '../api';\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      creatingGame: false\n    };\n\n    this.handleEnableAddMode = this.handleEnableAddMode.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n  }\n\n  componentDidMount() {\n    api.get().then(json => this.setState({ heroes: json }));\n  }\n\n  handleEnableAddMode() {\n    this.setState({\n      addingGame: true,\n      game: { numberPlayers: '', timeLimit: '90' }\n    });\n  }\n\n  handleCancel() {\n    this.setState({ addingGame: false, game: null });\n  }\n\n  handleSave() {\n    let game = this.state.game;\n\n    if (this.state.addingGame) {\n      api\n        .create(game)\n        .then(result => {\n          console.log('Successfully created!');\n          this.setState({\n            game: game,\n            addingGame: false,\n            currentGame: true\n          });\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    } else {\n      api\n        .update(this.state.game)\n        .catch(err => {});\n    }\n  }\n\n  handleOnChange(event) {\n    let game = this.state.game;\n    game[event.target.name] = event.target.value;\n    this.setState({ game: game });\n  }\n\n  render() {\n    return (\n        <div className=\"editarea\">\n          <button onClick={this.handleEnableAddMode}>Create A New Game</button>\n          <EditGame\n            addingGame={this.state.addingGame}\n            onChange={this.handleOnChange}\n            game={this.state.game}\n            onSave={this.handleSave}\n            onCancel={this.handleCancel}\n          />\n        </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Game from \"./components/Game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Tension</h1>\n        <div className=\"header-bar\" />\n        <app-heroes />\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}